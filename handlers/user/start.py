import logging

from aiogram import types, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from bot_start import bot
from integrations.database.models.user import get_user, get_user_dict
from keyboards.admin.admin_keyboard import admin_topic_kb
from keyboards.user.user_keyboard import get_phone_kb, menu_kb
from src.config import conf
from utils.states.user import FSMStart
from utils.texts import incoming_text


async def start_command(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    if message.message_thread_id is not None:
        user_info = await get_user_dict({'topic_id': message.message_thread_id}, session_maker)
        await bot.send_message(chat_id=int(conf.admin_topic),
                               message_thread_id=int(message.message_thread_id),
                               text=f'<b>–§–ò–û: <code>{user_info.user_fio}</code>\n'
                                    f'ID –≤ –¢–ì: <code>{user_info.telegram_id}</code>\n'
                                    f'–ò–º—è: <code>{user_info.telegram_fullname}</code>\n'
                                    f'ID –≤ –ë–î: <code>{user_info.id}</code>\n'
                                    f'Ô∏è–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>True ‚úÖ</code></b>',
                               reply_markup=await admin_topic_kb())
    else:
        user_info = await get_user(message.from_user.id, session_maker)
        if user_info.verify is False:
            try:
                await data['msg'].delete()
            except (TelegramBadRequest,KeyError):
                pass
            await message.delete()
            await state.set_state(FSMStart.start_registration)

            msg = await message.answer(
                '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏  üì±\n\n'
                '–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤–∞—à –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µüì±\n'
                '‚ùóÔ∏è<i>–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞</i> <code>+7XXXXXXXXXX</code>\n\n'
                '–ê —Ç–∞–∫ –∂–µ, —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üëá</b>\n\n'
                '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">–°—Å—ã–ª–∫–∞</a>',
                reply_markup=await get_phone_kb(),
                disable_web_page_preview=True)
        else:
            try:
                try:
                    await message.delete()
                except (TelegramBadRequest, KeyError):
                    pass
                msg = await data['msg'].edit_text(
                    text=incoming_text,
                    reply_markup=await menu_kb(session_maker, message.from_user.id))
            except (TelegramBadRequest, KeyError) as _ex:
                logging.error(_ex)
                try:
                    await message.delete()
                except (TelegramBadRequest, KeyError):
                    pass
                msg = await message.answer(
                    text=incoming_text,
                    reply_markup=await menu_kb(session_maker, message.from_user.id))
        await state.update_data(msg=msg)


async def main_menu(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    user_info = await get_user(call.from_user.id, session_maker)
    data = await state.get_data()
    if user_info.verify is True:
        try:
            msg = await data['msg'].edit_text(
                text=incoming_text,
                reply_markup=await menu_kb(session_maker, call.from_user.id))
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await call.message.delete()
            msg = await call.message.answer(
                text=incoming_text,
                reply_markup=await menu_kb(session_maker, call.from_user.id))
    else:
        await state.set_state(FSMStart.start_registration)

        try:
            msg = await data['msg'].edit_text(
                text=f'<b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±\n\n'
                     f'–ê —Ç–∞–∫ –∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â—ë —Ä–∞–∑ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ üëá</b>\n\n'
                     '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">–°—Å—ã–ª–∫–∞</a>',
                reply_markup=await get_phone_kb(),
                disable_web_page_preview=True)
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await call.message.delete()
            msg = await call.message.answer(
                text=f'<b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±\n\n'
                     f'–ê —Ç–∞–∫ –∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â—ë —Ä–∞–∑ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ üëá</b>\n\n'
                     '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">–°—Å—ã–ª–∫–∞</a>',
                reply_markup=await get_phone_kb(),
                disable_web_page_preview=True)
    await state.update_data(msg=msg)


def register_start_handler(dp: Dispatcher):
    dp.message.register(start_command, Command('start'))
    dp.callback_query.register(main_menu, F.data == 'main_menu')
