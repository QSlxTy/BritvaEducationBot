import asyncio
import logging

from aiogram import types, F, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from bot_start import bot
from integrations.database.models.new_user import is_phone_exists, get_new_user, update_new_user
from integrations.database.models.user import update_user, get_user
from keyboards.admin.admin_keyboard import admin_topic_kb
from keyboards.user.user_keyboard import to_menu_kb
from src.config import conf
from utils.SMS import send_sms
from utils.states.admin import FSMReg
from utils.states.user import FSMPhone, FSMStart


async def get_phone_number(message: types.Message, session_maker: sessionmaker, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    await data['msg'].delete()
    await state.set_state(FSMPhone.get_phone_number)
    if message.contact:
        phone = '8' + message.contact.phone_number[2:]
    else:
        phone = '8' + message.text[2:]
    if not await is_phone_exists(phone, session_maker):
        msg = await message.answer(
            text='<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å, '
                 '—Å–¥–µ–ª–∞—Ç—å –≤—ã —ç—Ç–æ —Å–º–æ–∂–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ\n\n'
                 '‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üëâ /start</b>'
        )
        await state.update_data(msg=msg)
        return
    use_info = await get_new_user(phone, session_maker)
    if use_info.verify_access is True:
        msg = await message.answer(
            text='<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å\n'
                 '/start</b>'
        )
        await state.update_data(msg=msg)
        return
    json = await send_sms(phone)
    await update_user(message.from_user.id, {'phone': str(phone)}, session_maker)
    msg = await message.answer(
        text='<b>–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º. üì≤\n\n'
             '–°–µ–π—á–∞—Å –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä –ø–æ—Å—Ç—É–ø–∏—Ç –∑–≤–æ–Ω–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
             '—É–∫–∞–∂–∏—Ç–µ <code>–∫–æ–¥</code> –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Å–∫–∞–∂–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫\n\n'
             '–í–∞—à –Ω–æ–º–µ—Ä –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ üõ°</b>'
    )
    await state.update_data(msg=msg, code=json['data']['pincode'], phone=phone)
    data = await state.get_data()
    await asyncio.sleep(60)
    user_info = await get_user(message.from_user.id, session_maker)
    if user_info.verify == 0:
        try:
            msg = await data['msg'].edit_text(
                text='<b>–ù–µ –ø—Ä–∏—à—ë–ª –∑–≤–æ–Ω–æ–∫?, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ\n\n</b>'
                     '<i>*Ô∏è–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start ‚ùóÔ∏è</i>'
            )
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            msg = await message.answer(
                text='<b>–ù–µ –ø—Ä–∏—à—ë–ª –∑–≤–æ–Ω–æ–∫?, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ\n\n</b>'
                     '<i>*Ô∏è–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start ‚ùóÔ∏è</i>'
            )
        await state.update_data(msg=msg)
    else:
        pass


async def verify_phone(message: types.Message, session_maker: sessionmaker, state: FSMContext):
    await state.set_state(FSMPhone.get_phone_number)
    data = await state.get_data()
    await update_new_user(data['phone'], {'verify_access': True}, session_maker)

    await message.delete()
    if int(data['code']) == int(message.text):
        try:
            await state.set_state(FSMReg.verify_phone)
            msg = await data['msg'].edit_text(
                '<b>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n'
                '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø...\n\n'
                '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n'
                '<code>–§–∞–º–∏–ª–∏—è –ò–º—è </code>\n\n'
                '–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–∏</b>\n\n'
                '*Ô∏è<i>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è ‚ùóÔ∏è</i>'
            )
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await message.delete()
            msg = await message.answer(
                '<b>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n'
                '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø...\n\n'
                '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n'
                '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ\n\n'
                '–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–∏</b>\n\n'
                '*Ô∏è<i>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è ‚ùóÔ∏è</i>'
            )
        user_info = await get_user(message.from_user.id, session_maker)
        await bot.send_message(chat_id=int(conf.admin_topic),
                               message_thread_id=int(user_info.topic_id),
                               text=f'<b>üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n'
                                    f'ID –≤ –¢–ì: <code>{user_info.telegram_id}</code>\n'
                                    f'–ò–º—è: <code>{user_info.telegram_fullname}</code>\n'
                                    f'ID –≤ –ë–î: <code>{user_info.id}</code>\n'
                                    f'‚≠êÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>True ‚úÖ</code></b>',
                               reply_markup=await admin_topic_kb())
        await update_user(message.from_user.id, {'verify': True}, session_maker)
    else:
        try:
            msg = await data['msg'].edit_text('<b>‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥\n'
                                              '–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ</b>\n\n'
                                              '<i>*Ô∏è–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start ‚ùóÔ∏è</i>')
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await message.delete()
            msg = await message.answer('<b>‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥\n'
                                       '–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ</b>\n\n'
                                       '<i>*Ô∏è–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start ‚ùóÔ∏è</i>')
    await state.update_data(msg=msg)


async def get_fio(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    await message.delete()
    await update_user(message.from_user.id, {'user_fio': message.text}, session_maker)
    try:
        await state.set_state(FSMReg.verify_phone)
        msg = await data['msg'].edit_text(
            '<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úîÔ∏è</b>',
            reply_markup=await to_menu_kb()
        )
    except (TelegramBadRequest, KeyError) as _ex:
        logging.error(_ex)
        await message.delete()
        msg = await message.answer(
            '<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úîÔ∏è</b>',
            reply_markup=await to_menu_kb()
        )
    user_info = await get_user(message.from_user.id, session_maker)
    await bot.send_message(chat_id=int(conf.admin_topic),
                           message_thread_id=int(user_info.topic_id),
                           text=f'<b>üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –§–ò–û\n\n'
                                f'‚≠ê –§–ò–û: <code>{user_info.user_fio}</code>\n'
                                f'ID –≤ –¢–ì: <code>{user_info.telegram_id}</code>\n'
                                f'–ò–º—è: <code>{user_info.telegram_fullname}</code>\n'
                                f'ID –≤ –ë–î: <code>{user_info.id}</code>\n'
                                f'Ô∏è–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>True ‚úÖ</code></b>',
                           reply_markup=await admin_topic_kb())
    await state.clear()
    await state.update_data(msg=msg)


def register_handler(dp: Dispatcher):
    dp.message.register(get_phone_number, FSMStart.start_registration, F.content_type.in_({'contact', 'text'}))
    dp.message.register(verify_phone, F.content_type == 'text', FSMPhone.get_phone_number)
    dp.message.register(get_fio, F.content_type == 'text', FSMReg.verify_phone)
