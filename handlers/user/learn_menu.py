import logging
from datetime import datetime

from aiogram import types, F, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from bot_start import bot
from integrations.database.models.lessons import get_lessons
from integrations.database.models.policy_status import get_learning_status, update_learning_status
from integrations.database.models.user import get_user
from keyboards.admin.admin_keyboard import admin_topic_kb
from keyboards.user.user_keyboard import menu_learn_kb, back_menu_kb
from src.config import conf
from utils.aiogram_helper import generate_progress_bar


async def learn_info(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    policy_info = await get_learning_status(call.from_user.id, session_maker)
    user_info = await get_user(call.from_user.id, session_maker)
    if policy_info.status == '–ù–µ –Ω–∞—á–∏–Ω–∞–ª':
        await update_learning_status(call.from_user.id, {'status': '–ù–∞—á–∞–ª'}, session_maker)
        if policy_info.policy == 'barber':
            text = '–ú–∞—Å—Ç–µ—Ä ‚úÇÔ∏è'
        else:
            text = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ü§µ'
        await bot.send_message(chat_id=int(conf.admin_topic),
                               message_thread_id=int(user_info.topic_id),
                               text=f'<b>üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—É—á–µ–Ω–∏–µ</b>\n\n'
                                    f'ID –≤ –¢–ì: <code>{user_info.telegram_id}</code>\n'
                                    f'–ò–º—è: <code>{user_info.telegram_fullname}</code>\n'
                                    f'–Æ–∑–µ—Ä–Ω–µ–π–º –≤ –¢–ì: <code>{user_info.telegram_username}</code>\n'
                                    f'ID –≤ –ë–î: <code>{user_info.id}</code>\n'
                                    f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <code>{text}</code>\n'
                                    f'‚≠êÔ∏è –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è {datetime.now()}\n'
                                    f'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>True ‚úÖ</code>',
                               reply_markup=await admin_topic_kb())
    policy_info = await get_learning_status(call.from_user.id, session_maker)
    max_score = await get_lessons(policy_info.policy, session_maker)
    progress_bar = await generate_progress_bar(policy_info.last_lesson_id, len(max_score))
    if policy_info.count_try <= 0:
        try:
            msg = await data['msg'].edit_text(
                text=f'<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è</b>',
                reply_markup=await back_menu_kb())
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await call.message.delete()
            msg = await call.message.answer(
                text=f'<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è</b>',
                reply_markup=await back_menu_kb())
        await state.update_data(msg=msg)
    else:
        try:
            msg = await data['msg'].edit_text(f'<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è\n\n'
                                              f'{progress_bar}</b>\n\n'
                                              f'<i>*Ô∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è‚ùóÔ∏è</i>',
                                              reply_markup=await menu_learn_kb())
        except (TelegramBadRequest, KeyError) as _ex:
            logging.error(_ex)
            await call.message.delete()
            msg = await call.message.answer(f'<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è\n\n'
                                            f'{progress_bar}</b>\n\n'
                                            f'<i>*Ô∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è‚ùóÔ∏è</i>',
                                            reply_markup=await menu_learn_kb())
    await state.update_data(msg=msg)


def register_handler(dp: Dispatcher):
    dp.callback_query.register(learn_info, F.data == 'learning_info')
